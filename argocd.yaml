tosca_definitions_version: cloudify_dsl_1_3

description: Installs ArgoCD on Kubernetes via Helm

imports:
  - https://cloudify.co/spec/cloudify/6.3.0/types.yaml
  - plugin:cloudify-helm-plugin
  - plugin:cloudify-utilities-plugin
  - plugin:cloudify-kubernetes-plugin

inputs:

  kubeconfig:
    description: Kubernetes configuration file used by Helm
    display_label: Kubeconfig
    type: string

  kubernetes_endpoint:
    description: Kubernetes API endpoint
    display_label: Kubernetes Endpoint
    type: string

  kubernetes_token:
    description: Kubernetes service account token used by Helm
    display_label: Kubernetes SA Token
    type: string
    default: { get_secret: kubernetes_token }

  helm_installation_source:
    description: Helm download link.
    display_label: Helm Installation Source
    type: string
    default: 'https://get.helm.sh/helm-v3.3.1-linux-amd64.tar.gz'

node_templates:

  helm_install:
    type: cloudify.nodes.helm.Binary
    properties:
      use_existing_resource: false
      installation_source: { get_input: helm_installation_source }

  repo:
    type: cloudify.nodes.helm.Repo
    properties:
      resource_config:
        name: bitnami
        repo_url: https://charts.bitnami.com/bitnami
    relationships:
      - target: helm_install
        type: cloudify.helm.relationships.run_on_host

  release:
    type: cloudify.nodes.helm.Release
    properties:
      client_config:
        configuration:
          file_content: { get_input: kubeconfig }
          api_options:
            api_key: { get_input: kubernetes_token }
      resource_config:
        name: argo-cd
        chart: bitnami/argo-cd
        set_values:
          - name: "server.service.type"
            value: LoadBalancer
    relationships:
      - target: helm_install
        type: cloudify.helm.relationships.run_on_host
      - target: repo
        type: cloudify.relationships.depends_on


  agrocd_service_endpoint:
    type: cloudify.kubernetes.resources.Service
    properties:
      client_config:
        configuration: &kubernetes_master_configuration
          api_options:
            host: { get_input: kubernetes_endpoint }
            api_key: { get_input: kubernetes_token }
            verify_ssl: false
      use_external_resource: true
      definition:
        apiVersion: v1
        kind: Service
        metadata:
          name: argo-cd-server
    relationships:
      - target: release
        type: cloudify.relationships.depends_on

  argocd_secret:
    type: cloudify.kubernetes.resources.CustomBlueprintDefinedResource
    properties:
      client_config:
        configuration: *kubernetes_master_configuration
      use_external_resource: true
      definition:
        apiVersion: v1
        kind: Secret
        metadata:
          name: 'argocd-secret'
      api_mapping:
        create:
          api: CoreV1Api
          method: create_namespaced_secret
          payload: V1Secret
        read:
          api: CoreV1Api
          method: read_namespaced_secret
        update:
          api: CoreV1Api
          method: replace_namespaced_secret
          payload: V1Secret
        delete:
          api: CoreV1Api
          method: delete_namespaced_secret
          payload: V1DeleteOptions
    relationships:
      - type: cloudify.relationships.depends_on
        target: agrocd_service_endpoint
    interfaces:
      cloudify.interfaces.lifecycle:
        delete: {}
        poststart:
          implementation: scripts/decode_secret.py
          executor: central_deployment_agent
          inputs:
            secret: { get_attribute: [ argocd_secret, kubernetes, data, clearPassword ] }

  wait_for_argocd:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/wait_for_ip.py
          executor: central_deployment_agent
          inputs:
            host: { get_attribute: [ agrocd_service_endpoint, kubernetes, status, load_balancer, ingress, 0, hostname ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: argocd_secret

capabilities:
  argocd_endpoint:
    description: Endpoint used for accessing ArgoCD installation
    value: { get_attribute: [ agrocd_service_endpoint, kubernetes, status, load_balancer, ingress, 0, hostname ] }
  argocd_user:
    description: Username for accessing ArgoCD
    value: admin
  argocd_password:
    description: Password for accessing ArgoCD
    value: { get_attribute: [ argocd_secret, decoded_secret ] }
